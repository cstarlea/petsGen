// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: idSubxiPT9JaDBeACu7FTa
// Component: ypu0XGCJBPXO
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: idSubxiPT9JaDBeACu7FTa/projectcss
import sty from "./PlasmicPageLayout.module.css"; // plasmic-import: ypu0XGCJBPXO/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: n7SMcEQK36EA/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: xy4vj4mRd44W/icon

createPlasmicElementProxy;

export const PlasmicPageLayout__VariantProps = new Array();

export const PlasmicPageLayout__ArgProps = new Array("children");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageLayout__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "kYjAKnpr8jBAxvPZY1mcUk",
        opId: "dffdab86-1045-4cc3-8bc8-baf61426f4be",
        userArgs: {},
        cacheKey: `plasmic.$.dffdab86-1045-4cc3-8bc8-baf61426f4be.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getServices: usePlasmicDataOp(() => {
      return {
        sourceId: "kYjAKnpr8jBAxvPZY1mcUk",
        opId: "dffdab86-1045-4cc3-8bc8-baf61426f4be",
        userArgs: {},
        cacheKey: `plasmic.$.dffdab86-1045-4cc3-8bc8-baf61426f4be.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getServices2: usePlasmicDataOp(() => {
      return {
        sourceId: "kYjAKnpr8jBAxvPZY1mcUk",
        opId: "dffdab86-1045-4cc3-8bc8-baf61426f4be",
        userArgs: {},
        cacheKey: `plasmic.$.dffdab86-1045-4cc3-8bc8-baf61426f4be.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <RichLayout
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      logoElement={
        <Icon2Icon
          className={classNames(projectcss.all, sty.svg__rbuan)}
          role={"img"}
        />
      }
      navMenuItems={(() => {
        const __composite = [{ path: null, name: null }];
        __composite["0"]["path"] = `/`;
        __composite["0"]["name"] = "Home";
        return __composite;
      })()}
      simpleNavTheme={(() => {
        const __composite = { scheme: null };
        __composite["scheme"] = "primary";
        return __composite;
      })()}
      title={"Pets"}
    >
      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <DataCtxReader__>
            {$ctx => (
              <div className={classNames(projectcss.all, sty.freeBox__jslzx)}>
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___1TXj3)}
                  role={"img"}
                />
              </div>
            )}
          </DataCtxReader__>
        }
      >
        <DataCtxReader__>
          {$ctx => (
            <div className={classNames(projectcss.all, sty.freeBox___9Muqm)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <section
                    className={classNames(projectcss.all, sty.section__fjlxn)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__vf0Vk
                      )}
                    >
                      {"Dashboard"}
                    </h1>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.form__tys8U
                        ),
                        data: {
                          sourceId: "kYjAKnpr8jBAxvPZY1mcUk",
                          opId: "20d61462-5bc7-4b37-822a-583d2afe04ef",
                          userArgs: {},
                          cacheKey: `plasmic.$.${(() => {
                            try {
                              return "getSchema";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}.$.20d61462-5bc7-4b37-822a-583d2afe04ef.$.`,
                          invalidatedKeys: null,
                          roleId: null
                        },
                        dataFormItems: (() => {
                          const __composite = [
                            {
                              key: "id",
                              inputType: "Text",
                              fieldId: "id",
                              label: "id",
                              name: "id",
                              hidden: null
                            },
                            {
                              key: "created_at",
                              inputType: "Text",
                              fieldId: "created_at",
                              label: "created_at",
                              name: "created_at",
                              hidden: null
                            },
                            {
                              key: "price",
                              inputType: "Number",
                              fieldId: "price",
                              label: "price",
                              name: "price"
                            },
                            {
                              key: "price_per_additional",
                              inputType: "Number",
                              fieldId: "price_per_additional",
                              label: "price_per_additional",
                              name: "price_per_additional"
                            },
                            {
                              key: "created_by",
                              inputType: "Text",
                              fieldId: "created_by",
                              label: "created_by",
                              name: "created_by",
                              hidden: null
                            },
                            {
                              key: "last_modified_at",
                              inputType: "Text",
                              fieldId: "last_modified_at",
                              label: "last_modified_at",
                              name: "last_modified_at",
                              hidden: null
                            },
                            {
                              key: "last_modified_by",
                              inputType: "Text",
                              fieldId: "last_modified_by",
                              label: "last_modified_by",
                              name: "last_modified_by",
                              hidden: null
                            },
                            {
                              key: "duration_estimate",
                              inputType: "Text",
                              fieldId: "duration_estimate",
                              label: "duration_estimate",
                              name: "duration_estimate"
                            },
                            {
                              key: "category",
                              inputType: "Text",
                              fieldId: "category",
                              label: "category",
                              name: "category"
                            },
                            {
                              key: "name",
                              inputType: "Text",
                              fieldId: "name",
                              label: "name",
                              name: "name"
                            }
                          ];

                          __composite["0"]["hidden"] = true;
                          __composite["1"]["hidden"] = true;
                          __composite["4"]["hidden"] = true;
                          __composite["5"]["hidden"] = true;
                          __composite["6"]["hidden"] = true;
                          return __composite;
                        })(),
                        formItems: [],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "simplified",
                        onFinish: async values => {
                          const $steps = {};
                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {};
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }
                        },
                        submitSlot: (
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__iBj96
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dAJ
                              )}
                            >
                              {"Submit"}
                            </div>
                          </AntdButton>
                        ),

                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      return <FormWrapper {...child$Props} />;
                    })()}
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.table__gm1BT
                        ),
                        data: (() => {
                          try {
                            return $queries.getServices2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        rowActions: [{ type: "item" }],
                        scopeClassName: sty["table__gm1BT__instance"],
                        themeResetClassName: classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )
                      };
                      return <RichTable {...child$Props} />;
                    })()}
                  </section>
                ),

                value: args.children
              })}
            </div>
          )}
        </DataCtxReader__>
      </LoadingBoundary>
    </RichLayout>
  );
}

const PlasmicDescendants = {
  root: ["root", "loadingBoundary"],
  loadingBoundary: ["loadingBoundary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageLayout__ArgProps,
          internalVariantPropNames: PlasmicPageLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageLayout";
  } else {
    func.displayName = `PlasmicPageLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicPageLayout = Object.assign(
  // Top-level PlasmicPageLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    // Metadata about props expected for PlasmicPageLayout
    internalVariantProps: PlasmicPageLayout__VariantProps,
    internalArgProps: PlasmicPageLayout__ArgProps
  }
);

export default PlasmicPageLayout;
/* prettier-ignore-end */
